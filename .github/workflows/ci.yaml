name: ci

on:
  pull_request:
    branches: [main]

  push:
    branches: [main]

jobs:
  pr-check:
    runs-on: [ubuntu-20.04]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.15
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: RyanSiu1995/kubebuilder-action@v1.2.1
        with:
          version: 2.3.1
          etcdVersion: 3.5.0
      - name: setup openvswitch
        run: sudo sh -c "apt update && apt install -y openvswitch-switch && systemctl start openvswitch-switch"
      - name: run lynx unit test
        run: |
          sudo make test
          sudo make race-test
          sudo make cover-test
      - uses: codecov/codecov-action@v2
        with:
          files: ./coverage.out

  golint:
    runs-on: [ubuntu-20.04]
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
      - uses: golangci/golangci-lint-action@v2
        with:
          version: v1.39
          only-new-issues: true
          # skip cache because of flaky behaviors
          skip-build-cache: true
          skip-pkg-cache: true

  run-deploy:
    runs-on: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2

      - name: install k8s
        run: |
          curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=777 sh -
          mkdir -p ~/.kube && cp /etc/rancher/k3s/k3s.yaml ~/.kube/config

      - name: build and import image
        run: |
          make images
          docker save lynx/release | sudo k3s ctr images import -

      - name: make kubernetes deploy test
        run: make deploy-test

  run-e2e:
    runs-on: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2

      - name: install e2e environment dependency
        run: sudo sh -c "apt update && apt install -y openvswitch-switch && systemctl start openvswitch-switch"

      - name: allow ssh connect to localhost
        run: sudo -H sh -c "ssh-keygen -qN '' </dev/zero; cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys"

      - name: setup e2e environment
        run: sudo -H bash tests/e2e/scripts/e2e-setup.sh

      - name: run e2e test cases
        run: sudo -H make e2e-test

  generate-check:
    runs-on: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2

      - name: make docker-generate
        run: sudo sh -c "make images && make docker-generate"

      - name: check if code changes
        run: sudo sh -c "git add -A && git diff HEAD --exit-code"

      - name: show message if failed
        if: ${{ failure() }}
        run: echo "::error::Please run \"make generate\" or \"make docker-generate\" before commit."
