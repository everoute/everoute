name: ci

on:
  pull_request:
    branches:
      - '**'

  push:
    branches: [ main, release-1.0 ]

  schedule:
    # 7:00 UTC+8
    - cron: "0 23 * * *"

jobs:
  pr-check:
    runs-on: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
      - name: run everoute unit test
        run: |
          sudo make docker-test
          sudo make docker-race-test
          sudo make docker-cover-test
      - uses: codecov/codecov-action@v2
        with:
          files: ./coverage.out

  golint:
    runs-on: [ubuntu-20.04]
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
      - uses: golangci/golangci-lint-action@v2
        with:
          version: v1.45
          only-new-issues: true
          # skip cache because of flaky behaviors
          skip-build-cache: true
          skip-pkg-cache: true

  run-e2e:
    runs-on: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2

      - name: install e2e environment dependency
        run: sudo sh -c "apt update && apt install -y openvswitch-switch=2.13.* conntrack && systemctl start openvswitch-switch"

      - name: allow ssh connect to localhost
        run: sudo -H sh -c "ssh-keygen -qN '' </dev/zero; cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys"

      - name: setup e2e environment
        run: sudo -H bash tests/e2e/scripts/e2e-setup.sh

      - name: run e2e test cases
        run: sudo -H make e2e-test

  run-k8s-e2e:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      - name: clean old eveorute
        run: sudo skaffold run -d=harbor.smartx.com/everoute -f skaffold-clean.yaml

      - name: wait clean process ready
        run: kubectl wait po -n kube-system --for=condition=Ready=True -l app=everoute -l component=everoute-clean --timeout=3m

      - name: restart system service pods
        run: |
          kubectl get pods -n kube-system | awk '{print $1}' | grep "^coredns\|^metrics" | xargs kubectl delete pods -n kube-system

      - name: stop clean pods
        if: always()
        run: kubectl delete -f hack/clean.yaml

      - name: build everoute and deploy
        run: sudo skaffold run -d=harbor.smartx.com/everoute

      - name: wait everoute ready
        run: bash hack/check_ready.sh

      - uses: actions/checkout@v2
        with:
          repository: "kubernetes/kubernetes"
          ref: "v1.21.5"
          path: "./kubernetes"

      - name: apply e2e patch
        run: cd kubernetes && git apply ../hack/0001-test-e2e-add-sleep-before-cannot-conntect-test.patch

      - name: build e2e
        run: cd kubernetes && make all WHAT=test/e2e/e2e.test && make all WHAT=vendor/github.com/onsi/ginkgo/ginkgo

      - name: remove remained ns in last test
        run: kubectl get ns | grep "policy\|netpol"  | awk '{print $1}' | xargs kubectl delete ns || echo "finish"

      - name: run test cases
        run: bash hack/run-k8s-e2e.sh

  generate-check:
    runs-on: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2

      - name: make docker-generate
        run: sudo sh -c "make image-generate && make docker-generate"

      - name: check if code changes
        run: sudo sh -c "git add -A && git diff HEAD --exit-code"

      - name: show message if failed
        if: ${{ failure() }}
        run: echo "::error::Please run \"make generate\" or \"make docker-generate\" before commit."

  slack-notification:
    if: ${{ always() }}
    needs: [ pr-check,golint,run-e2e,run-k8s-e2e,generate-check ]
    runs-on: [ ubuntu-20.04 ]
    env:
      SLACK_COLOR: 2EA44F
      RESULT_PR_CHECK: ":white_check_mark:"
      RESULT_GOLINT: ":white_check_mark:"
      RESULT_RUN_E2E: ":white_check_mark:"
      RESULT_RUN_K8S_E2E: ":white_check_mark:"
      RESULT_GENERATE_CHECK: ":white_check_mark:"
    steps:
      - if: ${{ needs.pr-check.result == 'failure'}}
        run: echo "SLACK_COLOR=DF0000" >> $GITHUB_ENV && echo "RESULT_PR_CHECK=:x:" >> $GITHUB_ENV
      - if: ${{ needs.golint.result == 'failure'}}
        run: echo "SLACK_COLOR=DF0000" >> $GITHUB_ENV && echo "RESULT_GOLINT=:x:" >> $GITHUB_ENV
      - if: ${{ needs.run-e2e.result == 'failure'}}
        run: echo "SLACK_COLOR=DF0000" >> $GITHUB_ENV && echo "RESULT_RUN_E2E=:x:" >> $GITHUB_ENV
      - if: ${{ needs.run-k8s-e2e.result == 'failure'}}
        run: echo "SLACK_COLOR=DF0000" >> $GITHUB_ENV && echo "RESULT_RUN_K8S_E2E=:x:" >> $GITHUB_ENV
      - if: ${{ needs.generate-check.result == 'failure'}}
        run: echo "SLACK_COLOR=DF0000" >> $GITHUB_ENV && echo "RESULT_GENERATE_CHECK=:x:" >> $GITHUB_ENV

      - if: ${{ needs.pr-check.result == 'cancelled'}}
        run: echo "RESULT_PR_CHECK=:ballot_box_with_check:" >> $GITHUB_ENV
      - if: ${{ needs.golint.result == 'cancelled'}}
        run: echo "RESULT_GOLINT=:ballot_box_with_check:" >> $GITHUB_ENV
      - if: ${{ needs.run-e2e.result == 'cancelled'}}
        run: echo "RESULT_RUN_E2E=:ballot_box_with_check:" >> $GITHUB_ENV
      - if: ${{ needs.run-k8s-e2e.result == 'cancelled'}}
        run: echo "RESULT_RUN_K8S_E2E=:ballot_box_with_check:" >> $GITHUB_ENV
      - if: ${{ needs.generate-check.result == 'cancelled'}}
        run: echo "RESULT_GENERATE_CHECK=:ballot_box_with_check:" >> $GITHUB_ENV

      - name: generate short commit sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: send message to slack
        uses: slackapi/slack-github-action@v1.17.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Finish Github Action CI, details <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} | `here`>"
                  }
                }
              ],
              "attachments": [
                {
                  "color": "${{ env.SLACK_COLOR }}",
                  "blocks": [
                    {"type": "section","fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*type: * ${{ github.event_name }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*ref: * ${{ github.ref }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*actor: * <${{ github.server_url }}/${{ github.actor }} | `${{ github.actor }}`>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*commit: * <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }} | `${{ env.SHORT_SHA }}`>"
                        }
                    ]},
                    {"type": "section","fields": [
                      {
                        "type": "mrkdwn",
                        "text": "${{ env.RESULT_PR_CHECK }} => *pr-check*"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "${{ env.RESULT_GOLINT }} => *golint*"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "${{ env.RESULT_RUN_E2E }} => *run-e2e*"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "${{ env.RESULT_RUN_K8S_E2E }} => *run-k8s-e2e*"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "${{ env.RESULT_GENERATE_CHECK }} => *generate-check*"
                      }
                    ]}
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_E2E_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
