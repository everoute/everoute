/*
Copyright 2021 The Everoute Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package tower

type Cluster struct {
	ID string `json:"id"`
}

type ConnectInput struct {
	Connect *UniqueInput `json:"connect"`
}

type ConnectManyInput struct {
	Connect    []UniqueInput `json:"connect,omitempty"`
	Disconnect []UniqueInput `json:"disconnect,omitempty"`
}

type CPU struct {
	Cores   int `json:"cores"`
	Sockets int `json:"sockets"`
}

type CPUInput struct {
	Cores   int `json:"cores"`
	Sockets int `json:"sockets"`
}

type CreateVMEffect struct {
	CloneID               *string `json:"clone_id"`
	CreatedFromTemplateID *string `json:"created_from_template_id"`
	IsFullCopy            *bool   `json:"is_full_copy"`
}

type ClusterWhereInput struct {
	ID *string `json:"id,omitempty"`
}

type DeleteVMEffect struct {
	IncludeSnapshots *bool `json:"include_snapshots"`
}

type FrozenDisks struct {
	Bus  string  `json:"bus"`
	Path string  `json:"path"`
	Size float64 `json:"size"`
	Type string  `json:"type"`
}

type FrozenVlan struct {
	VlanLocalID string `json:"vlan_local_id"`
}

type Host struct {
	DataIP string `json:"data_ip"`
	ID     string `json:"id"`
	Name   string `json:"name"`
}

type HostWhereUniqueInput struct {
	ID *string `json:"id"`
}

type Label struct {
	ID    string `json:"id"`
	Key   string `json:"key"`
	Value string `json:"value"`
	VMs   []VM   `json:"vms"`
}

type LabelCreateInput struct {
	Key   string           `json:"key"`
	Value *string          `json:"value"`
	VMs   ConnectManyInput `json:"vms"`
}

type LabelUpdateInput struct {
	VMs ConnectManyInput `json:"vms"`
}

type LabelWhereUniqueInput struct {
	ID *string `json:"id"`
}

type TemplateNic struct {
	Vlan *FrozenVlan `json:"vlan"`
}

type UniqueInput struct {
	ID      *string `json:"id,omitempty"`
	LocalID *string `json:"local_id,omitempty"`
}

type Vds struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	OvsbrName string `json:"ovsbr_name"`
}

type Vlan struct {
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus"`
	ID                string             `json:"id"`
	LocalID           string             `json:"local_id"`
	Name              string             `json:"name"`
	Vds               *Vds               `json:"vds"`
	VlanID            int                `json:"vlan_id"`
}

type VlanCreateInput struct {
	LocalID string        `json:"local_id"`
	Name    string        `json:"name"`
	Type    NetworkType   `json:"type"`
	Vds     *ConnectInput `json:"vds"`
	VlanID  int           `json:"vlan_id"`
}

type VlanWhereUniqueInput struct {
	ID      *string `json:"id"`
	LocalID *string `json:"local_id"`
}

type VM struct {
	Description       string             `json:"description"`
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus"`
	Host              *Host              `json:"host"`
	ID                string             `json:"id"`
	LocalID           string             `json:"local_id"`
	Name              string             `json:"name"`
	Status            VMStatus           `json:"status"`
}

type VMCreateInput struct {
	ClockOffset          string                          `json:"clock_offset"`
	Cluster              *ConnectInput                   `json:"cluster"`
	CPU                  *CPUInput                       `json:"cpu"`
	CPUModel             string                          `json:"cpu_model"`
	Description          string                          `json:"description"`
	Firmware             string                          `json:"firmware"`
	Ha                   bool                            `json:"ha"`
	Host                 *ConnectInput                   `json:"host"`
	ID                   *string                         `json:"id"`
	InRecycleBin         bool                            `json:"in_recycle_bin"`
	Internal             bool                            `json:"internal"`
	Ips                  string                          `json:"ips"`
	LocalID              string                          `json:"local_id"`
	Memory               float64                         `json:"memory"`
	Name                 string                          `json:"name"`
	NestedVirtualization bool                            `json:"nested_virtualization"`
	NodeIP               string                          `json:"node_ip"`
	Protected            bool                            `json:"protected"`
	Status               VMStatus                        `json:"status"`
	Vcpu                 int                             `json:"vcpu"`
	VMDisks              *VMDiskCreateManyWithoutVMInput `json:"vm_disks"`
	VMNics               *VMNicCreateManyWithoutVMInput  `json:"vm_nics"`
	VMToolsStatus        VMToolsStatus                   `json:"vm_tools_status"`
	WinOpt               bool                            `json:"win_opt"`
}

type VMDiskCreateManyWithoutVMInput struct {
	Create []VMDiskCreateWithoutVMInput `json:"create"`
}

type VMDiskCreateWithoutVMInput struct {
	Boot     int                                   `json:"boot"`
	Bus      string                                `json:"bus"`
	Index    *int                                  `json:"index"`
	Type     string                                `json:"type"`
	VMVolume *VMVolumeCreateOneWithoutVMDisksInput `json:"vm_volume"`
}

type VMNicCreateManyWithoutVMInput struct {
	Create []VMNicCreateWithoutVMInput `json:"create"`
}

type VMNicCreateWithoutVMInput struct {
	Enabled *bool         `json:"enabled"`
	LocalID string        `json:"local_id"`
	Model   *VMNicModel   `json:"model"`
	Vlan    *ConnectInput `json:"vlan"`
}

type VMTemplate struct {
	ClockOffset string        `json:"clock_offset"`
	Cluster     *Cluster      `json:"cluster"`
	CPU         *CPU          `json:"cpu"`
	CPUModel    string        `json:"cpu_model"`
	Firmware    string        `json:"firmware"`
	Ha          bool          `json:"ha"`
	ID          string        `json:"id"`
	VMDisks     []FrozenDisks `json:"vm_disks"`
	VMNics      []TemplateNic `json:"vm_nics"`
	Memory      float64       `json:"memory"`
	Vcpu        int           `json:"vcpu"`
	WinOpt      bool          `json:"win_opt"`
}

type VMTemplateWhereUniqueInput struct {
	ID *string `json:"id"`
}

type VMUpdateInput struct {
	Description *string `json:"description"`
	NodeIP      *string `json:"node_ip"`
}

type VMVolumeCreateOneWithoutVMDisksInput struct {
	Create *VMVolumeCreateWithoutVMDisksInput `json:"create"`
}

type VMVolumeCreateWithoutVMDisksInput struct {
	Cluster          *ConnectInput                `json:"cluster"`
	ElfStoragePolicy VMVolumeElfStoragePolicyType `json:"elf_storage_policy"`
	LocalCreatedAt   string                       `json:"local_created_at"`
	LocalID          string                       `json:"local_id"`
	Mounting         bool                         `json:"mounting"`
	Name             string                       `json:"name"`
	Path             string                       `json:"path"`
	Sharing          bool                         `json:"sharing"`
	Size             float64                      `json:"size"`
}

type VMWhereInput struct {
	Cluster      *ClusterWhereInput `json:"cluster,omitempty"`
	Name         *string            `json:"name,omitempty"`
	InRecycleBin *bool              `json:"in_recycle_bin,omitempty"`
}

type VMWhereUniqueInput struct {
	ID *string `json:"id"`
}

type EntityAsyncStatus string

const (
	EntityAsyncStatusCreating EntityAsyncStatus = "CREATING"
	EntityAsyncStatusDeleting EntityAsyncStatus = "DELETING"
	EntityAsyncStatusUpdating EntityAsyncStatus = "UPDATING"
)

type NetworkType string

const (
	NetworkTypeAccess     NetworkType = "ACCESS"
	NetworkTypeManagement NetworkType = "MANAGEMENT"
	NetworkTypeMigration  NetworkType = "MIGRATION"
	NetworkTypeStorage    NetworkType = "STORAGE"
	NetworkTypeVM         NetworkType = "VM"
)

type VMNicModel string

const (
	VMNicModelE1000  VMNicModel = "E1000"
	VMNicModelVirtio VMNicModel = "VIRTIO"
)

type VMStatus string

const (
	VMStatusDeleted   VMStatus = "DELETED"
	VMStatusRunning   VMStatus = "RUNNING"
	VMStatusStopped   VMStatus = "STOPPED"
	VMStatusSuspended VMStatus = "SUSPENDED"
	VMStatusUnknown   VMStatus = "UNKNOWN"
)

type VMToolsStatus string

const (
	VMToolsStatusNotInstalled VMToolsStatus = "NOT_INSTALLED"
	VMToolsStatusNotRunning   VMToolsStatus = "NOT_RUNNING"
	VMToolsStatusRestriction  VMToolsStatus = "RESTRICTION"
	VMToolsStatusRunning      VMToolsStatus = "RUNNING"
)

type VMVolumeElfStoragePolicyType string

const (
	VMVolumeElfStoragePolicyTypeReplica1ThickProvision VMVolumeElfStoragePolicyType = "REPLICA_1_THICK_PROVISION"
	VMVolumeElfStoragePolicyTypeReplica1ThinProvision  VMVolumeElfStoragePolicyType = "REPLICA_1_THIN_PROVISION"
	VMVolumeElfStoragePolicyTypeReplica2ThickProvision VMVolumeElfStoragePolicyType = "REPLICA_2_THICK_PROVISION"
	VMVolumeElfStoragePolicyTypeReplica2ThinProvision  VMVolumeElfStoragePolicyType = "REPLICA_2_THIN_PROVISION"
	VMVolumeElfStoragePolicyTypeReplica3ThickProvision VMVolumeElfStoragePolicyType = "REPLICA_3_THICK_PROVISION"
	VMVolumeElfStoragePolicyTypeReplica3ThinProvision  VMVolumeElfStoragePolicyType = "REPLICA_3_THIN_PROVISION"
)
