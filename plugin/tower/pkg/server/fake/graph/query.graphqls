# mock tower query vms and labels
type Query {
    vms: [VM!]!
    labels: [Label!]!
    securityPolicies: [SecurityPolicy!]!
    isolationPolicies: [IsolationPolicy!]!
    everouteClusters: [EverouteCluster!]!
    hosts: [Host!]!
    systemEndpoints: SystemEndpoints
    tasks(orderBy: TaskOrderByInput, last: Int): [Task!]!
    securityGroups: [SecurityGroup!]!
}

# mock tower subscribe vm and label
type Subscription {
    vm: VMEvent!
    label: LabelEvent!
    securityPolicy: SecurityPolicyEvent!
    isolationPolicy: IsolationPolicyEvent!
    everouteCluster: EverouteClusterEvent!
    host: HostEvent!
    systemEndpoints: SystemEndpoints!
    task: TaskEvent!
    securityGroup: SecurityGroupEvent!
}

# mock tower user login
type Mutation {
    login(data: LoginInput!): Login!
}

type Login {
    token: String!
}

input LoginInput {
    password: String!
    source: UserSource!
    username: String!
}

enum UserSource {
    LDAP
    LOCAL
}

type VMEvent {
    mutation: MutationType!
    node: VM!
    previousValues: ObjectReference
}

type LabelEvent {
    mutation: MutationType!
    node: Label!
    previousValues: ObjectReference
}

type SecurityPolicyEvent {
    mutation: MutationType!
    node: SecurityPolicy!
    previousValues: ObjectReference
}

type IsolationPolicyEvent {
    mutation: MutationType!
    node: IsolationPolicy!
    previousValues: ObjectReference
}

type EverouteClusterEvent {
    mutation: MutationType!
    node: EverouteCluster!
    previousValues: ObjectReference
}

type HostEvent {
    mutation: MutationType!
    node: Host!
    previousValues: ObjectReference
}

type TaskEvent {
    mutation: MutationType!
    node: Task!
    previousValues: ObjectReference
}

type SecurityGroupEvent {
    mutation: MutationType!
    node: SecurityGroup!
    previousValues: ObjectReference
}

type ObjectReference {
    id: ID!
}

enum MutationType {
    CREATED
    DELETED
    UPDATED
}

enum TaskOrderByInput {
    local_created_at_ASC
    local_created_at_DESC
}
