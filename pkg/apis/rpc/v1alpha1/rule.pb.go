// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: pkg/apis/rpc/v1alpha1/rule.proto

package v1alpha1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleID      string `protobuf:"bytes,1,opt,name=RuleID,proto3" json:"RuleID,omitempty"`
	Priority    int32  `protobuf:"varint,2,opt,name=Priority,proto3" json:"Priority,omitempty"`
	SrcIPAddr   string `protobuf:"bytes,3,opt,name=SrcIPAddr,proto3" json:"SrcIPAddr,omitempty"`
	DstIPAddr   string `protobuf:"bytes,4,opt,name=DstIPAddr,proto3" json:"DstIPAddr,omitempty"`
	IPProtocol  uint32 `protobuf:"varint,5,opt,name=IPProtocol,proto3" json:"IPProtocol,omitempty"`
	SrcPort     uint32 `protobuf:"varint,6,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	SrcPortMask uint32 `protobuf:"varint,7,opt,name=SrcPortMask,proto3" json:"SrcPortMask,omitempty"`
	DstPort     uint32 `protobuf:"varint,8,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	DstPortMask uint32 `protobuf:"varint,9,opt,name=DstPortMask,proto3" json:"DstPortMask,omitempty"`
	Action      string `protobuf:"bytes,10,opt,name=Action,proto3" json:"Action,omitempty"`
}

func (x *PolicyRule) Reset() {
	*x = PolicyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRule) ProtoMessage() {}

func (x *PolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRule.ProtoReflect.Descriptor instead.
func (*PolicyRule) Descriptor() ([]byte, []int) {
	return file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyRule) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *PolicyRule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PolicyRule) GetSrcIPAddr() string {
	if x != nil {
		return x.SrcIPAddr
	}
	return ""
}

func (x *PolicyRule) GetDstIPAddr() string {
	if x != nil {
		return x.DstIPAddr
	}
	return ""
}

func (x *PolicyRule) GetIPProtocol() uint32 {
	if x != nil {
		return x.IPProtocol
	}
	return 0
}

func (x *PolicyRule) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *PolicyRule) GetSrcPortMask() uint32 {
	if x != nil {
		return x.SrcPortMask
	}
	return 0
}

func (x *PolicyRule) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *PolicyRule) GetDstPortMask() uint32 {
	if x != nil {
		return x.DstPortMask
	}
	return 0
}

func (x *PolicyRule) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type FlowEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32 `protobuf:"varint,1,opt,name=Priority,proto3" json:"Priority,omitempty"`
	FlowID   uint64 `protobuf:"varint,2,opt,name=FlowID,proto3" json:"FlowID,omitempty"`
}

func (x *FlowEntry) Reset() {
	*x = FlowEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowEntry) ProtoMessage() {}

func (x *FlowEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowEntry.ProtoReflect.Descriptor instead.
func (*FlowEntry) Descriptor() ([]byte, []int) {
	return file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescGZIP(), []int{1}
}

func (x *FlowEntry) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *FlowEntry) GetFlowID() uint64 {
	if x != nil {
		return x.FlowID
	}
	return 0
}

type PolicyRuleReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameSpace string `protobuf:"bytes,1,opt,name=NameSpace,proto3" json:"NameSpace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *PolicyRuleReference) Reset() {
	*x = PolicyRuleReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRuleReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRuleReference) ProtoMessage() {}

func (x *PolicyRuleReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRuleReference.ProtoReflect.Descriptor instead.
func (*PolicyRuleReference) Descriptor() ([]byte, []int) {
	return file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyRuleReference) GetNameSpace() string {
	if x != nil {
		return x.NameSpace
	}
	return ""
}

func (x *PolicyRuleReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyRuleReference) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RuleEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EveroutePolicyRule  *PolicyRule            `protobuf:"bytes,1,opt,name=EveroutePolicyRule,proto3" json:"EveroutePolicyRule,omitempty"`
	Direction           uint32                 `protobuf:"varint,2,opt,name=Direction,proto3" json:"Direction,omitempty"`
	Tier                uint32                 `protobuf:"varint,3,opt,name=Tier,proto3" json:"Tier,omitempty"`
	Mode                string                 `protobuf:"bytes,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	RuleFlowMap         map[string]*FlowEntry  `protobuf:"bytes,5,rep,name=RuleFlowMap,proto3" json:"RuleFlowMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PolicyRuleReference []*PolicyRuleReference `protobuf:"bytes,6,rep,name=PolicyRuleReference,proto3" json:"PolicyRuleReference,omitempty"`
}

func (x *RuleEntry) Reset() {
	*x = RuleEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleEntry) ProtoMessage() {}

func (x *RuleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleEntry.ProtoReflect.Descriptor instead.
func (*RuleEntry) Descriptor() ([]byte, []int) {
	return file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescGZIP(), []int{3}
}

func (x *RuleEntry) GetEveroutePolicyRule() *PolicyRule {
	if x != nil {
		return x.EveroutePolicyRule
	}
	return nil
}

func (x *RuleEntry) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *RuleEntry) GetTier() uint32 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *RuleEntry) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *RuleEntry) GetRuleFlowMap() map[string]*FlowEntry {
	if x != nil {
		return x.RuleFlowMap
	}
	return nil
}

func (x *RuleEntry) GetPolicyRuleReference() []*PolicyRuleReference {
	if x != nil {
		return x.PolicyRuleReference
	}
	return nil
}

type RuleEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleEntries []*RuleEntry `protobuf:"bytes,1,rep,name=RuleEntries,proto3" json:"RuleEntries,omitempty"`
}

func (x *RuleEntries) Reset() {
	*x = RuleEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleEntries) ProtoMessage() {}

func (x *RuleEntries) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleEntries.ProtoReflect.Descriptor instead.
func (*RuleEntries) Descriptor() ([]byte, []int) {
	return file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescGZIP(), []int{4}
}

func (x *RuleEntries) GetRuleEntries() []*RuleEntry {
	if x != nil {
		return x.RuleEntries
	}
	return nil
}

type RuleIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleIDs []string `protobuf:"bytes,1,rep,name=RuleIDs,proto3" json:"RuleIDs,omitempty"`
}

func (x *RuleIDs) Reset() {
	*x = RuleIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleIDs) ProtoMessage() {}

func (x *RuleIDs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleIDs.ProtoReflect.Descriptor instead.
func (*RuleIDs) Descriptor() ([]byte, []int) {
	return file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescGZIP(), []int{5}
}

func (x *RuleIDs) GetRuleIDs() []string {
	if x != nil {
		return x.RuleIDs
	}
	return nil
}

type FlowIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowIDs []uint64 `protobuf:"varint,1,rep,packed,name=FlowIDs,proto3" json:"FlowIDs,omitempty"`
}

func (x *FlowIDs) Reset() {
	*x = FlowIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIDs) ProtoMessage() {}

func (x *FlowIDs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIDs.ProtoReflect.Descriptor instead.
func (*FlowIDs) Descriptor() ([]byte, []int) {
	return file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescGZIP(), []int{6}
}

func (x *FlowIDs) GetFlowIDs() []uint64 {
	if x != nil {
		return x.FlowIDs
	}
	return nil
}

var File_pkg_apis_rpc_v1alpha1_rule_proto protoreflect.FileDescriptor

var file_pkg_apis_rpc_v1alpha1_rule_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x21, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xac, 0x02, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x72, 0x63, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x72, 0x63, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x73, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x73, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3f, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x44, 0x22, 0x5b, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xe9, 0x03, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x5d, 0x0a,
	0x12, 0x45, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x76, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x45, 0x76, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x5f, 0x0a, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x4d, 0x61, 0x70, 0x12, 0x68, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x6c, 0x0a,
	0x10, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x0b, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x07, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x22,
	0x23, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x44, 0x73, 0x32, 0xc1, 0x02, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x57, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x76, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x1a, 0x2e, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2a, 0x2e, 0x65, 0x76, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x44, 0x73, 0x1a, 0x2e, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescOnce sync.Once
	file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescData = file_pkg_apis_rpc_v1alpha1_rule_proto_rawDesc
)

func file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescGZIP() []byte {
	file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescOnce.Do(func() {
		file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescData)
	})
	return file_pkg_apis_rpc_v1alpha1_rule_proto_rawDescData
}

var file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pkg_apis_rpc_v1alpha1_rule_proto_goTypes = []interface{}{
	(*PolicyRule)(nil),          // 0: everoute_io.pkg.apis.rpc.v1alpha1.PolicyRule
	(*FlowEntry)(nil),           // 1: everoute_io.pkg.apis.rpc.v1alpha1.FlowEntry
	(*PolicyRuleReference)(nil), // 2: everoute_io.pkg.apis.rpc.v1alpha1.PolicyRuleReference
	(*RuleEntry)(nil),           // 3: everoute_io.pkg.apis.rpc.v1alpha1.RuleEntry
	(*RuleEntries)(nil),         // 4: everoute_io.pkg.apis.rpc.v1alpha1.RuleEntries
	(*RuleIDs)(nil),             // 5: everoute_io.pkg.apis.rpc.v1alpha1.RuleIDs
	(*FlowIDs)(nil),             // 6: everoute_io.pkg.apis.rpc.v1alpha1.FlowIDs
	nil,                         // 7: everoute_io.pkg.apis.rpc.v1alpha1.RuleEntry.RuleFlowMapEntry
	(*emptypb.Empty)(nil),       // 8: google.protobuf.Empty
}
var file_pkg_apis_rpc_v1alpha1_rule_proto_depIdxs = []int32{
	0, // 0: everoute_io.pkg.apis.rpc.v1alpha1.RuleEntry.EveroutePolicyRule:type_name -> everoute_io.pkg.apis.rpc.v1alpha1.PolicyRule
	7, // 1: everoute_io.pkg.apis.rpc.v1alpha1.RuleEntry.RuleFlowMap:type_name -> everoute_io.pkg.apis.rpc.v1alpha1.RuleEntry.RuleFlowMapEntry
	2, // 2: everoute_io.pkg.apis.rpc.v1alpha1.RuleEntry.PolicyRuleReference:type_name -> everoute_io.pkg.apis.rpc.v1alpha1.PolicyRuleReference
	3, // 3: everoute_io.pkg.apis.rpc.v1alpha1.RuleEntries.RuleEntries:type_name -> everoute_io.pkg.apis.rpc.v1alpha1.RuleEntry
	1, // 4: everoute_io.pkg.apis.rpc.v1alpha1.RuleEntry.RuleFlowMapEntry.value:type_name -> everoute_io.pkg.apis.rpc.v1alpha1.FlowEntry
	8, // 5: everoute_io.pkg.apis.rpc.v1alpha1.Getter.GetAllRules:input_type -> google.protobuf.Empty
	5, // 6: everoute_io.pkg.apis.rpc.v1alpha1.Getter.GetRulesByName:input_type -> everoute_io.pkg.apis.rpc.v1alpha1.RuleIDs
	6, // 7: everoute_io.pkg.apis.rpc.v1alpha1.Getter.GetRulesByFlow:input_type -> everoute_io.pkg.apis.rpc.v1alpha1.FlowIDs
	4, // 8: everoute_io.pkg.apis.rpc.v1alpha1.Getter.GetAllRules:output_type -> everoute_io.pkg.apis.rpc.v1alpha1.RuleEntries
	4, // 9: everoute_io.pkg.apis.rpc.v1alpha1.Getter.GetRulesByName:output_type -> everoute_io.pkg.apis.rpc.v1alpha1.RuleEntries
	4, // 10: everoute_io.pkg.apis.rpc.v1alpha1.Getter.GetRulesByFlow:output_type -> everoute_io.pkg.apis.rpc.v1alpha1.RuleEntries
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_pkg_apis_rpc_v1alpha1_rule_proto_init() }
func file_pkg_apis_rpc_v1alpha1_rule_proto_init() {
	if File_pkg_apis_rpc_v1alpha1_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRuleReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_apis_rpc_v1alpha1_rule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_apis_rpc_v1alpha1_rule_proto_goTypes,
		DependencyIndexes: file_pkg_apis_rpc_v1alpha1_rule_proto_depIdxs,
		MessageInfos:      file_pkg_apis_rpc_v1alpha1_rule_proto_msgTypes,
	}.Build()
	File_pkg_apis_rpc_v1alpha1_rule_proto = out.File
	file_pkg_apis_rpc_v1alpha1_rule_proto_rawDesc = nil
	file_pkg_apis_rpc_v1alpha1_rule_proto_goTypes = nil
	file_pkg_apis_rpc_v1alpha1_rule_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GetterClient is the client API for Getter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetterClient interface {
	GetAllRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RuleEntries, error)
	GetRulesByName(ctx context.Context, in *RuleIDs, opts ...grpc.CallOption) (*RuleEntries, error)
	GetRulesByFlow(ctx context.Context, in *FlowIDs, opts ...grpc.CallOption) (*RuleEntries, error)
}

type getterClient struct {
	cc grpc.ClientConnInterface
}

func NewGetterClient(cc grpc.ClientConnInterface) GetterClient {
	return &getterClient{cc}
}

func (c *getterClient) GetAllRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RuleEntries, error) {
	out := new(RuleEntries)
	err := c.cc.Invoke(ctx, "/everoute_io.pkg.apis.rpc.v1alpha1.Getter/GetAllRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getterClient) GetRulesByName(ctx context.Context, in *RuleIDs, opts ...grpc.CallOption) (*RuleEntries, error) {
	out := new(RuleEntries)
	err := c.cc.Invoke(ctx, "/everoute_io.pkg.apis.rpc.v1alpha1.Getter/GetRulesByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getterClient) GetRulesByFlow(ctx context.Context, in *FlowIDs, opts ...grpc.CallOption) (*RuleEntries, error) {
	out := new(RuleEntries)
	err := c.cc.Invoke(ctx, "/everoute_io.pkg.apis.rpc.v1alpha1.Getter/GetRulesByFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetterServer is the server API for Getter service.
type GetterServer interface {
	GetAllRules(context.Context, *emptypb.Empty) (*RuleEntries, error)
	GetRulesByName(context.Context, *RuleIDs) (*RuleEntries, error)
	GetRulesByFlow(context.Context, *FlowIDs) (*RuleEntries, error)
}

// UnimplementedGetterServer can be embedded to have forward compatible implementations.
type UnimplementedGetterServer struct {
}

func (*UnimplementedGetterServer) GetAllRules(context.Context, *emptypb.Empty) (*RuleEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRules not implemented")
}
func (*UnimplementedGetterServer) GetRulesByName(context.Context, *RuleIDs) (*RuleEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRulesByName not implemented")
}
func (*UnimplementedGetterServer) GetRulesByFlow(context.Context, *FlowIDs) (*RuleEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRulesByFlow not implemented")
}

func RegisterGetterServer(s *grpc.Server, srv GetterServer) {
	s.RegisterService(&_Getter_serviceDesc, srv)
}

func _Getter_GetAllRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetterServer).GetAllRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/everoute_io.pkg.apis.rpc.v1alpha1.Getter/GetAllRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetterServer).GetAllRules(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Getter_GetRulesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetterServer).GetRulesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/everoute_io.pkg.apis.rpc.v1alpha1.Getter/GetRulesByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetterServer).GetRulesByName(ctx, req.(*RuleIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Getter_GetRulesByFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetterServer).GetRulesByFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/everoute_io.pkg.apis.rpc.v1alpha1.Getter/GetRulesByFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetterServer).GetRulesByFlow(ctx, req.(*FlowIDs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Getter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "everoute_io.pkg.apis.rpc.v1alpha1.Getter",
	HandlerType: (*GetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllRules",
			Handler:    _Getter_GetAllRules_Handler,
		},
		{
			MethodName: "GetRulesByName",
			Handler:    _Getter_GetRulesByName_Handler,
		},
		{
			MethodName: "GetRulesByFlow",
			Handler:    _Getter_GetRulesByFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/rpc/v1alpha1/rule.proto",
}
