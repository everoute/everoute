// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: pkg/apis/exporter/v1alpha1/exporter.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DIR int32

const (
	DIR_CT_ORIGIN_IN      DIR = 0
	DIR_CT_ORIGIN_OUT     DIR = 1
	DIR_CT_ORIGIN_LOCAL   DIR = 2
	DIR_CT_ORIGIN_UNKNOWN DIR = 9
)

// Enum value maps for DIR.
var (
	DIR_name = map[int32]string{
		0: "CT_ORIGIN_IN",
		1: "CT_ORIGIN_OUT",
		2: "CT_ORIGIN_LOCAL",
		9: "CT_ORIGIN_UNKNOWN",
	}
	DIR_value = map[string]int32{
		"CT_ORIGIN_IN":      0,
		"CT_ORIGIN_OUT":     1,
		"CT_ORIGIN_LOCAL":   2,
		"CT_ORIGIN_UNKNOWN": 9,
	}
)

func (x DIR) Enum() *DIR {
	p := new(DIR)
	*p = x
	return p
}

func (x DIR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DIR) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_enumTypes[0].Descriptor()
}

func (DIR) Type() protoreflect.EnumType {
	return &file_pkg_apis_exporter_v1alpha1_exporter_proto_enumTypes[0]
}

func (x DIR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DIR.Descriptor instead.
func (DIR) EnumDescriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{0}
}

type PktMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId    string `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	SampleRate uint32 `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	SamplePool uint32 `protobuf:"varint,3,opt,name=sample_pool,json=samplePool,proto3" json:"sample_pool,omitempty"`
	Dropped    uint32 `protobuf:"varint,4,opt,name=dropped,proto3" json:"dropped,omitempty"`
	// entire ethernet pkt
	RawArp [][]byte `protobuf:"bytes,7,rep,name=raw_arp,json=rawArp,proto3" json:"raw_arp,omitempty"`
	RawIp  [][]byte `protobuf:"bytes,8,rep,name=raw_ip,json=rawIp,proto3" json:"raw_ip,omitempty"`
}

func (x *PktMessage) Reset() {
	*x = PktMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PktMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PktMessage) ProtoMessage() {}

func (x *PktMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PktMessage.ProtoReflect.Descriptor instead.
func (*PktMessage) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{0}
}

func (x *PktMessage) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *PktMessage) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *PktMessage) GetSamplePool() uint32 {
	if x != nil {
		return x.SamplePool
	}
	return 0
}

func (x *PktMessage) GetDropped() uint32 {
	if x != nil {
		return x.Dropped
	}
	return 0
}

func (x *PktMessage) GetRawArp() [][]byte {
	if x != nil {
		return x.RawArp
	}
	return nil
}

func (x *PktMessage) GetRawIp() [][]byte {
	if x != nil {
		return x.RawIp
	}
	return nil
}

type CounterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string     `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Counter []*Counter `protobuf:"bytes,2,rep,name=counter,proto3" json:"counter,omitempty"`
}

func (x *CounterMessage) Reset() {
	*x = CounterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterMessage) ProtoMessage() {}

func (x *CounterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterMessage.ProtoReflect.Descriptor instead.
func (*CounterMessage) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{1}
}

func (x *CounterMessage) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *CounterMessage) GetCounter() []*Counter {
	if x != nil {
		return x.Counter
	}
	return nil
}

type ArpCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InArpRequest  uint32 `protobuf:"varint,1,opt,name=in_arp_request,json=inArpRequest,proto3" json:"in_arp_request,omitempty"`
	InArpReply    uint32 `protobuf:"varint,2,opt,name=in_arp_reply,json=inArpReply,proto3" json:"in_arp_reply,omitempty"`
	OutArpRequest uint32 `protobuf:"varint,3,opt,name=out_arp_request,json=outArpRequest,proto3" json:"out_arp_request,omitempty"`
	OutArpReply   uint32 `protobuf:"varint,4,opt,name=out_arp_reply,json=outArpReply,proto3" json:"out_arp_reply,omitempty"`
}

func (x *ArpCounter) Reset() {
	*x = ArpCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArpCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArpCounter) ProtoMessage() {}

func (x *ArpCounter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArpCounter.ProtoReflect.Descriptor instead.
func (*ArpCounter) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{2}
}

func (x *ArpCounter) GetInArpRequest() uint32 {
	if x != nil {
		return x.InArpRequest
	}
	return 0
}

func (x *ArpCounter) GetInArpReply() uint32 {
	if x != nil {
		return x.InArpReply
	}
	return 0
}

func (x *ArpCounter) GetOutArpRequest() uint32 {
	if x != nil {
		return x.OutArpRequest
	}
	return 0
}

func (x *ArpCounter) GetOutArpReply() uint32 {
	if x != nil {
		return x.OutArpReply
	}
	return 0
}

type Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ifname     string            `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	ExternalId map[string]string `protobuf:"bytes,2,rep,name=external_id,json=externalId,proto3" json:"external_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type       uint32            `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	LinkSpeed  uint64            `protobuf:"varint,4,opt,name=link_speed,json=linkSpeed,proto3" json:"link_speed,omitempty"`
	Direction  uint32            `protobuf:"varint,5,opt,name=direction,proto3" json:"direction,omitempty"`
	Status     uint32            `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// arp pkts info (from sflow)
	ArpCounter *ArpCounter `protobuf:"bytes,21,opt,name=arp_counter,json=arpCounter,proto3" json:"arp_counter,omitempty"`
	// increase statistic from last counter
	InOctets         uint64 `protobuf:"varint,7,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InUcastPkts      uint32 `protobuf:"varint,8,opt,name=in_ucast_pkts,json=inUcastPkts,proto3" json:"in_ucast_pkts,omitempty"`
	InMulticastPkts  uint32 `protobuf:"varint,9,opt,name=in_multicast_pkts,json=inMulticastPkts,proto3" json:"in_multicast_pkts,omitempty"`
	InBroadcastPkts  uint32 `protobuf:"varint,10,opt,name=in_broadcast_pkts,json=inBroadcastPkts,proto3" json:"in_broadcast_pkts,omitempty"`
	InDiscards       uint32 `protobuf:"varint,11,opt,name=in_discards,json=inDiscards,proto3" json:"in_discards,omitempty"`
	InErrors         uint32 `protobuf:"varint,12,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"`
	InUnknownProtos  uint32 `protobuf:"varint,13,opt,name=in_unknown_protos,json=inUnknownProtos,proto3" json:"in_unknown_protos,omitempty"`
	OutOctets        uint64 `protobuf:"varint,14,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutUcastPkts     uint32 `protobuf:"varint,15,opt,name=out_ucast_pkts,json=outUcastPkts,proto3" json:"out_ucast_pkts,omitempty"`
	OutMulticastPkts uint32 `protobuf:"varint,16,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"`
	OutBroadcastPkts uint32 `protobuf:"varint,17,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"`
	OutDiscards      uint32 `protobuf:"varint,18,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"`
	OutErrors        uint32 `protobuf:"varint,19,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"`
	PromiscuousMode  uint32 `protobuf:"varint,20,opt,name=promiscuous_mode,json=promiscuousMode,proto3" json:"promiscuous_mode,omitempty"`
}

func (x *Counter) Reset() {
	*x = Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counter) ProtoMessage() {}

func (x *Counter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counter.ProtoReflect.Descriptor instead.
func (*Counter) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{3}
}

func (x *Counter) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *Counter) GetExternalId() map[string]string {
	if x != nil {
		return x.ExternalId
	}
	return nil
}

func (x *Counter) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Counter) GetLinkSpeed() uint64 {
	if x != nil {
		return x.LinkSpeed
	}
	return 0
}

func (x *Counter) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *Counter) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Counter) GetArpCounter() *ArpCounter {
	if x != nil {
		return x.ArpCounter
	}
	return nil
}

func (x *Counter) GetInOctets() uint64 {
	if x != nil {
		return x.InOctets
	}
	return 0
}

func (x *Counter) GetInUcastPkts() uint32 {
	if x != nil {
		return x.InUcastPkts
	}
	return 0
}

func (x *Counter) GetInMulticastPkts() uint32 {
	if x != nil {
		return x.InMulticastPkts
	}
	return 0
}

func (x *Counter) GetInBroadcastPkts() uint32 {
	if x != nil {
		return x.InBroadcastPkts
	}
	return 0
}

func (x *Counter) GetInDiscards() uint32 {
	if x != nil {
		return x.InDiscards
	}
	return 0
}

func (x *Counter) GetInErrors() uint32 {
	if x != nil {
		return x.InErrors
	}
	return 0
}

func (x *Counter) GetInUnknownProtos() uint32 {
	if x != nil {
		return x.InUnknownProtos
	}
	return 0
}

func (x *Counter) GetOutOctets() uint64 {
	if x != nil {
		return x.OutOctets
	}
	return 0
}

func (x *Counter) GetOutUcastPkts() uint32 {
	if x != nil {
		return x.OutUcastPkts
	}
	return 0
}

func (x *Counter) GetOutMulticastPkts() uint32 {
	if x != nil {
		return x.OutMulticastPkts
	}
	return 0
}

func (x *Counter) GetOutBroadcastPkts() uint32 {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return 0
}

func (x *Counter) GetOutDiscards() uint32 {
	if x != nil {
		return x.OutDiscards
	}
	return 0
}

func (x *Counter) GetOutErrors() uint32 {
	if x != nil {
		return x.OutErrors
	}
	return 0
}

func (x *Counter) GetPromiscuousMode() uint32 {
	if x != nil {
		return x.PromiscuousMode
	}
	return 0
}

type FlowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string  `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Flow    []*Flow `protobuf:"bytes,2,rep,name=flow,proto3" json:"flow,omitempty"`
}

func (x *FlowMessage) Reset() {
	*x = FlowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMessage) ProtoMessage() {}

func (x *FlowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMessage.ProtoReflect.Descriptor instead.
func (*FlowMessage) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{4}
}

func (x *FlowMessage) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *FlowMessage) GetFlow() []*Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginTuple      *FlowTuple    `protobuf:"bytes,1,opt,name=origin_tuple,json=originTuple,proto3" json:"origin_tuple,omitempty"`
	ReplyTuple       *FlowTuple    `protobuf:"bytes,2,opt,name=reply_tuple,json=replyTuple,proto3" json:"reply_tuple,omitempty"`
	OriginCounter    *FlowCounter  `protobuf:"bytes,3,opt,name=origin_counter,json=originCounter,proto3" json:"origin_counter,omitempty"`
	ReplyCounter     *FlowCounter  `protobuf:"bytes,4,opt,name=reply_counter,json=replyCounter,proto3" json:"reply_counter,omitempty"`
	Protocol         uint32        `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ProtocolInfo     *ProtocolInfo `protobuf:"bytes,6,opt,name=protocol_info,json=protocolInfo,proto3" json:"protocol_info,omitempty"`
	OriginDir        DIR           `protobuf:"varint,7,opt,name=origin_dir,json=originDir,proto3,enum=everoute_io.pkg.apis.exporter.v1alpha1.DIR" json:"origin_dir,omitempty"`
	BondUplinkIfname string        `protobuf:"bytes,19,opt,name=bond_uplink_ifname,json=bondUplinkIfname,proto3" json:"bond_uplink_ifname,omitempty"` // empty for normal uplink port
	StartTime        uint64        `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          uint64        `protobuf:"varint,9,opt,name=endTime,proto3" json:"endTime,omitempty"` // only for destroy event
	UpdateTime       uint64        `protobuf:"varint,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// ct info
	CtId      uint32 `protobuf:"varint,11,opt,name=ct_id,json=ctId,proto3" json:"ct_id,omitempty"`
	CtTimeout uint32 `protobuf:"varint,12,opt,name=ct_timeout,json=ctTimeout,proto3" json:"ct_timeout,omitempty"`
	CtZone    uint32 `protobuf:"varint,13,opt,name=ct_zone,json=ctZone,proto3" json:"ct_zone,omitempty"`
	CtUse     uint32 `protobuf:"varint,14,opt,name=ct_use,json=ctUse,proto3" json:"ct_use,omitempty"`
	CtMark    uint32 `protobuf:"varint,15,opt,name=ct_mark,json=ctMark,proto3" json:"ct_mark,omitempty"`
	CtStatus  uint32 `protobuf:"varint,16,opt,name=ct_status,json=ctStatus,proto3" json:"ct_status,omitempty"`
	CtLabel   []byte `protobuf:"bytes,17,opt,name=ct_label,json=ctLabel,proto3" json:"ct_label,omitempty"`
	// policy info
	Policy []*Policy `protobuf:"bytes,18,rep,name=policy,proto3" json:"policy,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{5}
}

func (x *Flow) GetOriginTuple() *FlowTuple {
	if x != nil {
		return x.OriginTuple
	}
	return nil
}

func (x *Flow) GetReplyTuple() *FlowTuple {
	if x != nil {
		return x.ReplyTuple
	}
	return nil
}

func (x *Flow) GetOriginCounter() *FlowCounter {
	if x != nil {
		return x.OriginCounter
	}
	return nil
}

func (x *Flow) GetReplyCounter() *FlowCounter {
	if x != nil {
		return x.ReplyCounter
	}
	return nil
}

func (x *Flow) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Flow) GetProtocolInfo() *ProtocolInfo {
	if x != nil {
		return x.ProtocolInfo
	}
	return nil
}

func (x *Flow) GetOriginDir() DIR {
	if x != nil {
		return x.OriginDir
	}
	return DIR_CT_ORIGIN_IN
}

func (x *Flow) GetBondUplinkIfname() string {
	if x != nil {
		return x.BondUplinkIfname
	}
	return ""
}

func (x *Flow) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Flow) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Flow) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Flow) GetCtId() uint32 {
	if x != nil {
		return x.CtId
	}
	return 0
}

func (x *Flow) GetCtTimeout() uint32 {
	if x != nil {
		return x.CtTimeout
	}
	return 0
}

func (x *Flow) GetCtZone() uint32 {
	if x != nil {
		return x.CtZone
	}
	return 0
}

func (x *Flow) GetCtUse() uint32 {
	if x != nil {
		return x.CtUse
	}
	return 0
}

func (x *Flow) GetCtMark() uint32 {
	if x != nil {
		return x.CtMark
	}
	return 0
}

func (x *Flow) GetCtStatus() uint32 {
	if x != nil {
		return x.CtStatus
	}
	return 0
}

func (x *Flow) GetCtLabel() []byte {
	if x != nil {
		return x.CtLabel
	}
	return nil
}

func (x *Flow) GetPolicy() []*Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`     // normal, global
	Dir       uint32 `protobuf:"varint,4,opt,name=dir,proto3" json:"dir,omitempty"`      // egress = 0, ingress = 1
	Mode      string `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`     // monitor, work
	Action    string `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"` // allow, deny
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{6}
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Policy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Policy) GetDir() uint32 {
	if x != nil {
		return x.Dir
	}
	return 0
}

func (x *Policy) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Policy) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type FlowTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      []byte `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst      []byte `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	EthSrc   []byte `protobuf:"bytes,3,opt,name=eth_src,json=ethSrc,proto3" json:"eth_src,omitempty"`
	EthDst   []byte `protobuf:"bytes,4,opt,name=eth_dst,json=ethDst,proto3" json:"eth_dst,omitempty"`
	SrcPort  uint32 `protobuf:"varint,5,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort  uint32 `protobuf:"varint,6,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	IcmpId   uint32 `protobuf:"varint,7,opt,name=icmp_id,json=icmpId,proto3" json:"icmp_id,omitempty"`
	IcmpType uint32 `protobuf:"varint,8,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`
	IcmpCode uint32 `protobuf:"varint,9,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`
}

func (x *FlowTuple) Reset() {
	*x = FlowTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTuple) ProtoMessage() {}

func (x *FlowTuple) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTuple.ProtoReflect.Descriptor instead.
func (*FlowTuple) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{7}
}

func (x *FlowTuple) GetSrc() []byte {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FlowTuple) GetDst() []byte {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *FlowTuple) GetEthSrc() []byte {
	if x != nil {
		return x.EthSrc
	}
	return nil
}

func (x *FlowTuple) GetEthDst() []byte {
	if x != nil {
		return x.EthDst
	}
	return nil
}

func (x *FlowTuple) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *FlowTuple) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *FlowTuple) GetIcmpId() uint32 {
	if x != nil {
		return x.IcmpId
	}
	return 0
}

func (x *FlowTuple) GetIcmpType() uint32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

func (x *FlowTuple) GetIcmpCode() uint32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

type FlowCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets uint64 `protobuf:"varint,1,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes   uint64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *FlowCounter) Reset() {
	*x = FlowCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCounter) ProtoMessage() {}

func (x *FlowCounter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCounter.ProtoReflect.Descriptor instead.
func (*FlowCounter) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{8}
}

func (x *FlowCounter) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *FlowCounter) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type ProtocolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcpInfo *TcpInfo `protobuf:"bytes,1,opt,name=tcp_info,json=tcpInfo,proto3" json:"tcp_info,omitempty"`
}

func (x *ProtocolInfo) Reset() {
	*x = ProtocolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfo) ProtoMessage() {}

func (x *ProtocolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfo.ProtoReflect.Descriptor instead.
func (*ProtocolInfo) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{9}
}

func (x *ProtocolInfo) GetTcpInfo() *TcpInfo {
	if x != nil {
		return x.TcpInfo
	}
	return nil
}

type TcpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   uint32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	CaState uint32 `protobuf:"varint,2,opt,name=ca_state,json=caState,proto3" json:"ca_state,omitempty"`
	Rto     uint32 `protobuf:"varint,3,opt,name=rto,proto3" json:"rto,omitempty"`
	Rtt     uint32 `protobuf:"varint,4,opt,name=rtt,proto3" json:"rtt,omitempty"`
	RttVar  uint32 `protobuf:"varint,5,opt,name=rtt_var,json=rttVar,proto3" json:"rtt_var,omitempty"`
}

func (x *TcpInfo) Reset() {
	*x = TcpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpInfo) ProtoMessage() {}

func (x *TcpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpInfo.ProtoReflect.Descriptor instead.
func (*TcpInfo) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{10}
}

func (x *TcpInfo) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TcpInfo) GetCaState() uint32 {
	if x != nil {
		return x.CaState
	}
	return 0
}

func (x *TcpInfo) GetRto() uint32 {
	if x != nil {
		return x.Rto
	}
	return 0
}

func (x *TcpInfo) GetRtt() uint32 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *TcpInfo) GetRttVar() uint32 {
	if x != nil {
		return x.RttVar
	}
	return 0
}

type BondMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string               `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Ports   map[string]*BondPort `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BondMsg) Reset() {
	*x = BondMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondMsg) ProtoMessage() {}

func (x *BondMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondMsg.ProtoReflect.Descriptor instead.
func (*BondMsg) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{11}
}

func (x *BondMsg) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *BondMsg) GetPorts() map[string]*BondPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

type BondPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BondName string `protobuf:"bytes,1,opt,name=bond_name,json=bondName,proto3" json:"bond_name,omitempty"`
	BondMode string `protobuf:"bytes,2,opt,name=bond_mode,json=bondMode,proto3" json:"bond_mode,omitempty"`
	// milliseconds
	UpDelay                  uint64                    `protobuf:"varint,3,opt,name=up_delay,json=upDelay,proto3" json:"up_delay,omitempty"`
	DownDelay                uint64                    `protobuf:"varint,4,opt,name=down_delay,json=downDelay,proto3" json:"down_delay,omitempty"`
	NextRebalance            uint64                    `protobuf:"varint,5,opt,name=next_rebalance,json=nextRebalance,proto3" json:"next_rebalance,omitempty"`
	LacpStatus               string                    `protobuf:"bytes,6,opt,name=lacp_status,json=lacpStatus,proto3" json:"lacp_status,omitempty"`
	LacpFallbackAb           string                    `protobuf:"bytes,7,opt,name=lacp_fallback_ab,json=lacpFallbackAb,proto3" json:"lacp_fallback_ab,omitempty"`
	ActiveSlaveMac           []byte                    `protobuf:"bytes,8,opt,name=active_slave_mac,json=activeSlaveMac,proto3" json:"active_slave_mac,omitempty"`
	ActiveSlaveInterfaceName string                    `protobuf:"bytes,9,opt,name=active_slave_interface_name,json=activeSlaveInterfaceName,proto3" json:"active_slave_interface_name,omitempty"`
	LacpTime                 string                    `protobuf:"bytes,10,opt,name=lacp_time,json=lacpTime,proto3" json:"lacp_time,omitempty"`
	Ifs                      map[string]*BondInterface `protobuf:"bytes,11,rep,name=ifs,proto3" json:"ifs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BondPort) Reset() {
	*x = BondPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondPort) ProtoMessage() {}

func (x *BondPort) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondPort.ProtoReflect.Descriptor instead.
func (*BondPort) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{12}
}

func (x *BondPort) GetBondName() string {
	if x != nil {
		return x.BondName
	}
	return ""
}

func (x *BondPort) GetBondMode() string {
	if x != nil {
		return x.BondMode
	}
	return ""
}

func (x *BondPort) GetUpDelay() uint64 {
	if x != nil {
		return x.UpDelay
	}
	return 0
}

func (x *BondPort) GetDownDelay() uint64 {
	if x != nil {
		return x.DownDelay
	}
	return 0
}

func (x *BondPort) GetNextRebalance() uint64 {
	if x != nil {
		return x.NextRebalance
	}
	return 0
}

func (x *BondPort) GetLacpStatus() string {
	if x != nil {
		return x.LacpStatus
	}
	return ""
}

func (x *BondPort) GetLacpFallbackAb() string {
	if x != nil {
		return x.LacpFallbackAb
	}
	return ""
}

func (x *BondPort) GetActiveSlaveMac() []byte {
	if x != nil {
		return x.ActiveSlaveMac
	}
	return nil
}

func (x *BondPort) GetActiveSlaveInterfaceName() string {
	if x != nil {
		return x.ActiveSlaveInterfaceName
	}
	return ""
}

func (x *BondPort) GetLacpTime() string {
	if x != nil {
		return x.LacpTime
	}
	return ""
}

func (x *BondPort) GetIfs() map[string]*BondInterface {
	if x != nil {
		return x.Ifs
	}
	return nil
}

type BondInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	IsActiveSlave bool   `protobuf:"varint,3,opt,name=is_active_slave,json=isActiveSlave,proto3" json:"is_active_slave,omitempty"`
	MayEnable     bool   `protobuf:"varint,4,opt,name=may_enable,json=mayEnable,proto3" json:"may_enable,omitempty"`
	// lacp info
	TxPdu               uint64 `protobuf:"varint,5,opt,name=tx_pdu,json=txPdu,proto3" json:"tx_pdu,omitempty"`
	RxPdu               uint64 `protobuf:"varint,6,opt,name=rx_pdu,json=rxPdu,proto3" json:"rx_pdu,omitempty"`
	RxBadPdu            uint64 `protobuf:"varint,7,opt,name=rx_bad_pdu,json=rxBadPdu,proto3" json:"rx_bad_pdu,omitempty"`
	RxMarkerRequestPdu  uint64 `protobuf:"varint,8,opt,name=rx_marker_request_pdu,json=rxMarkerRequestPdu,proto3" json:"rx_marker_request_pdu,omitempty"`
	LinkExpired         uint64 `protobuf:"varint,9,opt,name=link_expired,json=linkExpired,proto3" json:"link_expired,omitempty"`
	LinkDefaulted       uint64 `protobuf:"varint,10,opt,name=link_defaulted,json=linkDefaulted,proto3" json:"link_defaulted,omitempty"`
	CarrierStatusChange uint64 `protobuf:"varint,11,opt,name=carrier_status_change,json=carrierStatusChange,proto3" json:"carrier_status_change,omitempty"`
	ActorState          string `protobuf:"bytes,12,opt,name=actor_state,json=actorState,proto3" json:"actor_state,omitempty"`
	PartnerState        string `protobuf:"bytes,13,opt,name=partner_state,json=partnerState,proto3" json:"partner_state,omitempty"`
}

func (x *BondInterface) Reset() {
	*x = BondInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondInterface) ProtoMessage() {}

func (x *BondInterface) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondInterface.ProtoReflect.Descriptor instead.
func (*BondInterface) Descriptor() ([]byte, []int) {
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP(), []int{13}
}

func (x *BondInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BondInterface) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BondInterface) GetIsActiveSlave() bool {
	if x != nil {
		return x.IsActiveSlave
	}
	return false
}

func (x *BondInterface) GetMayEnable() bool {
	if x != nil {
		return x.MayEnable
	}
	return false
}

func (x *BondInterface) GetTxPdu() uint64 {
	if x != nil {
		return x.TxPdu
	}
	return 0
}

func (x *BondInterface) GetRxPdu() uint64 {
	if x != nil {
		return x.RxPdu
	}
	return 0
}

func (x *BondInterface) GetRxBadPdu() uint64 {
	if x != nil {
		return x.RxBadPdu
	}
	return 0
}

func (x *BondInterface) GetRxMarkerRequestPdu() uint64 {
	if x != nil {
		return x.RxMarkerRequestPdu
	}
	return 0
}

func (x *BondInterface) GetLinkExpired() uint64 {
	if x != nil {
		return x.LinkExpired
	}
	return 0
}

func (x *BondInterface) GetLinkDefaulted() uint64 {
	if x != nil {
		return x.LinkDefaulted
	}
	return 0
}

func (x *BondInterface) GetCarrierStatusChange() uint64 {
	if x != nil {
		return x.CarrierStatusChange
	}
	return 0
}

func (x *BondInterface) GetActorState() string {
	if x != nil {
		return x.ActorState
	}
	return ""
}

func (x *BondInterface) GetPartnerState() string {
	if x != nil {
		return x.PartnerState
	}
	return ""
}

var File_pkg_apis_exporter_v1alpha1_exporter_proto protoreflect.FileDescriptor

var file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x65, 0x76, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x50, 0x6b, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77,
	0x5f, 0x61, 0x72, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x61, 0x77, 0x41,
	0x72, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x05, 0x72, 0x61, 0x77, 0x49, 0x70, 0x22, 0x76, 0x0a, 0x0e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x41, 0x72, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x41, 0x72, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x70,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e,
	0x41, 0x72, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x41, 0x72, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x41, 0x72, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x91, 0x07, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x72, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x72, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x72,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x75, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e,
	0x55, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x69, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x75,
	0x74, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x55, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x75,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73,
	0x63, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04,
	0x66, 0x6c, 0x6f, 0x77, 0x22, 0xae, 0x07, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x54, 0x0a,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x76, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x59, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x49, 0x52, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6f,
	0x6e, 0x64, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x74, 0x55, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x46, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x01, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x74, 0x68, 0x5f, 0x73, 0x72,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x74, 0x68, 0x53, 0x72, 0x63, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x74, 0x68, 0x5f, 0x64, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x65, 0x74, 0x68, 0x44, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x22, 0x5a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x63, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x77, 0x0a, 0x07,
	0x54, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x74, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x74, 0x74, 0x56, 0x61, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x07, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x76,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x6a,
	0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x04, 0x0a, 0x08, 0x42,
	0x6f, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6e, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6e, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x63, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x61, 0x63, 0x70, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x62, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x6c, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x63, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x03, 0x69, 0x66, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x2e, 0x49, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x69, 0x66, 0x73,
	0x1a, 0x6d, 0x0a, 0x08, 0x49, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x65, 0x76, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc5, 0x03, 0x0a, 0x0d, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x79, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x70, 0x64, 0x75, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x50, 0x64, 0x75, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x78, 0x5f, 0x70, 0x64, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x78, 0x50,
	0x64, 0x75, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x64, 0x75,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x78, 0x42, 0x61, 0x64, 0x50, 0x64, 0x75,
	0x12, 0x31, 0x0a, 0x15, 0x72, 0x78, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x64, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x72, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x64, 0x75, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x56, 0x0a, 0x03, 0x44, 0x49, 0x52, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x54, 0x5f, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x09, 0x42,
	0x1c, 0x5a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescOnce sync.Once
	file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescData = file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDesc
)

func file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescGZIP() []byte {
	file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescOnce.Do(func() {
		file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescData)
	})
	return file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDescData
}

var file_pkg_apis_exporter_v1alpha1_exporter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pkg_apis_exporter_v1alpha1_exporter_proto_goTypes = []interface{}{
	(DIR)(0),               // 0: everoute_io.pkg.apis.exporter.v1alpha1.DIR
	(*PktMessage)(nil),     // 1: everoute_io.pkg.apis.exporter.v1alpha1.PktMessage
	(*CounterMessage)(nil), // 2: everoute_io.pkg.apis.exporter.v1alpha1.CounterMessage
	(*ArpCounter)(nil),     // 3: everoute_io.pkg.apis.exporter.v1alpha1.ArpCounter
	(*Counter)(nil),        // 4: everoute_io.pkg.apis.exporter.v1alpha1.Counter
	(*FlowMessage)(nil),    // 5: everoute_io.pkg.apis.exporter.v1alpha1.FlowMessage
	(*Flow)(nil),           // 6: everoute_io.pkg.apis.exporter.v1alpha1.Flow
	(*Policy)(nil),         // 7: everoute_io.pkg.apis.exporter.v1alpha1.Policy
	(*FlowTuple)(nil),      // 8: everoute_io.pkg.apis.exporter.v1alpha1.FlowTuple
	(*FlowCounter)(nil),    // 9: everoute_io.pkg.apis.exporter.v1alpha1.FlowCounter
	(*ProtocolInfo)(nil),   // 10: everoute_io.pkg.apis.exporter.v1alpha1.ProtocolInfo
	(*TcpInfo)(nil),        // 11: everoute_io.pkg.apis.exporter.v1alpha1.TcpInfo
	(*BondMsg)(nil),        // 12: everoute_io.pkg.apis.exporter.v1alpha1.BondMsg
	(*BondPort)(nil),       // 13: everoute_io.pkg.apis.exporter.v1alpha1.BondPort
	(*BondInterface)(nil),  // 14: everoute_io.pkg.apis.exporter.v1alpha1.BondInterface
	nil,                    // 15: everoute_io.pkg.apis.exporter.v1alpha1.Counter.ExternalIdEntry
	nil,                    // 16: everoute_io.pkg.apis.exporter.v1alpha1.BondMsg.PortsEntry
	nil,                    // 17: everoute_io.pkg.apis.exporter.v1alpha1.BondPort.IfsEntry
}
var file_pkg_apis_exporter_v1alpha1_exporter_proto_depIdxs = []int32{
	4,  // 0: everoute_io.pkg.apis.exporter.v1alpha1.CounterMessage.counter:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.Counter
	15, // 1: everoute_io.pkg.apis.exporter.v1alpha1.Counter.external_id:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.Counter.ExternalIdEntry
	3,  // 2: everoute_io.pkg.apis.exporter.v1alpha1.Counter.arp_counter:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.ArpCounter
	6,  // 3: everoute_io.pkg.apis.exporter.v1alpha1.FlowMessage.flow:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.Flow
	8,  // 4: everoute_io.pkg.apis.exporter.v1alpha1.Flow.origin_tuple:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.FlowTuple
	8,  // 5: everoute_io.pkg.apis.exporter.v1alpha1.Flow.reply_tuple:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.FlowTuple
	9,  // 6: everoute_io.pkg.apis.exporter.v1alpha1.Flow.origin_counter:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.FlowCounter
	9,  // 7: everoute_io.pkg.apis.exporter.v1alpha1.Flow.reply_counter:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.FlowCounter
	10, // 8: everoute_io.pkg.apis.exporter.v1alpha1.Flow.protocol_info:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.ProtocolInfo
	0,  // 9: everoute_io.pkg.apis.exporter.v1alpha1.Flow.origin_dir:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.DIR
	7,  // 10: everoute_io.pkg.apis.exporter.v1alpha1.Flow.policy:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.Policy
	11, // 11: everoute_io.pkg.apis.exporter.v1alpha1.ProtocolInfo.tcp_info:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.TcpInfo
	16, // 12: everoute_io.pkg.apis.exporter.v1alpha1.BondMsg.ports:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.BondMsg.PortsEntry
	17, // 13: everoute_io.pkg.apis.exporter.v1alpha1.BondPort.ifs:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.BondPort.IfsEntry
	13, // 14: everoute_io.pkg.apis.exporter.v1alpha1.BondMsg.PortsEntry.value:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.BondPort
	14, // 15: everoute_io.pkg.apis.exporter.v1alpha1.BondPort.IfsEntry.value:type_name -> everoute_io.pkg.apis.exporter.v1alpha1.BondInterface
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pkg_apis_exporter_v1alpha1_exporter_proto_init() }
func file_pkg_apis_exporter_v1alpha1_exporter_proto_init() {
	if File_pkg_apis_exporter_v1alpha1_exporter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PktMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArpCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_apis_exporter_v1alpha1_exporter_proto_goTypes,
		DependencyIndexes: file_pkg_apis_exporter_v1alpha1_exporter_proto_depIdxs,
		EnumInfos:         file_pkg_apis_exporter_v1alpha1_exporter_proto_enumTypes,
		MessageInfos:      file_pkg_apis_exporter_v1alpha1_exporter_proto_msgTypes,
	}.Build()
	File_pkg_apis_exporter_v1alpha1_exporter_proto = out.File
	file_pkg_apis_exporter_v1alpha1_exporter_proto_rawDesc = nil
	file_pkg_apis_exporter_v1alpha1_exporter_proto_goTypes = nil
	file_pkg_apis_exporter_v1alpha1_exporter_proto_depIdxs = nil
}
