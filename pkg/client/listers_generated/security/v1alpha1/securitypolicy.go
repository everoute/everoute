/*
Copyright 2021 The Everoute Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1alpha1 "github.com/everoute/everoute/pkg/apis/security/v1alpha1"
)

// SecurityPolicyLister helps list SecurityPolicies.
type SecurityPolicyLister interface {
	// List lists all SecurityPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityPolicy, err error)
	// SecurityPolicies returns an object that can list and get SecurityPolicies.
	SecurityPolicies(namespace string) SecurityPolicyNamespaceLister
	SecurityPolicyListerExpansion
}

// securityPolicyLister implements the SecurityPolicyLister interface.
type securityPolicyLister struct {
	indexer cache.Indexer
}

// NewSecurityPolicyLister returns a new SecurityPolicyLister.
func NewSecurityPolicyLister(indexer cache.Indexer) SecurityPolicyLister {
	return &securityPolicyLister{indexer: indexer}
}

// List lists all SecurityPolicies in the indexer.
func (s *securityPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityPolicy))
	})
	return ret, err
}

// SecurityPolicies returns an object that can list and get SecurityPolicies.
func (s *securityPolicyLister) SecurityPolicies(namespace string) SecurityPolicyNamespaceLister {
	return securityPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecurityPolicyNamespaceLister helps list and get SecurityPolicies.
type SecurityPolicyNamespaceLister interface {
	// List lists all SecurityPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityPolicy, err error)
	// Get retrieves the SecurityPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SecurityPolicy, error)
	SecurityPolicyNamespaceListerExpansion
}

// securityPolicyNamespaceLister implements the SecurityPolicyNamespaceLister
// interface.
type securityPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecurityPolicies in the indexer for a given namespace.
func (s securityPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityPolicy))
	})
	return ret, err
}

// Get retrieves the SecurityPolicy from the indexer for a given namespace and name.
func (s securityPolicyNamespaceLister) Get(name string) (*v1alpha1.SecurityPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("securitypolicy"), name)
	}
	return obj.(*v1alpha1.SecurityPolicy), nil
}
