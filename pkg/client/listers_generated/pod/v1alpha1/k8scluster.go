/*
Copyright The Everoute Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1alpha1 "github.com/everoute/everoute/pkg/apis/pod/v1alpha1"
)

// K8sClusterLister helps list K8sClusters.
// All objects returned here must be treated as read-only.
type K8sClusterLister interface {
	// List lists all K8sClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.K8sCluster, err error)
	// K8sClusters returns an object that can list and get K8sClusters.
	K8sClusters(namespace string) K8sClusterNamespaceLister
	K8sClusterListerExpansion
}

// k8sClusterLister implements the K8sClusterLister interface.
type k8sClusterLister struct {
	indexer cache.Indexer
}

// NewK8sClusterLister returns a new K8sClusterLister.
func NewK8sClusterLister(indexer cache.Indexer) K8sClusterLister {
	return &k8sClusterLister{indexer: indexer}
}

// List lists all K8sClusters in the indexer.
func (s *k8sClusterLister) List(selector labels.Selector) (ret []*v1alpha1.K8sCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.K8sCluster))
	})
	return ret, err
}

// K8sClusters returns an object that can list and get K8sClusters.
func (s *k8sClusterLister) K8sClusters(namespace string) K8sClusterNamespaceLister {
	return k8sClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// K8sClusterNamespaceLister helps list and get K8sClusters.
// All objects returned here must be treated as read-only.
type K8sClusterNamespaceLister interface {
	// List lists all K8sClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.K8sCluster, err error)
	// Get retrieves the K8sCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.K8sCluster, error)
	K8sClusterNamespaceListerExpansion
}

// k8sClusterNamespaceLister implements the K8sClusterNamespaceLister
// interface.
type k8sClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all K8sClusters in the indexer for a given namespace.
func (s k8sClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.K8sCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.K8sCluster))
	})
	return ret, err
}

// Get retrieves the K8sCluster from the indexer for a given namespace and name.
func (s k8sClusterNamespaceLister) Get(name string) (*v1alpha1.K8sCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("k8scluster"), name)
	}
	return obj.(*v1alpha1.K8sCluster), nil
}
